//Implement stack as an abstract data type using singly linked list and use this ADT for conversion of
//infix expression to postfix.

#include <iostream>
#include <string>
#include <cctype>
#include <stack>
using namespace std;

class Stack {
public:
    // Node structure for the singly linked list
    struct Node {
        char data;
        Node* next;
    };
    
    Node* top;

    // Constructor
    Stack() : top(nullptr) {}

    // Push function
    void push(char c) {
        Node* newNode = new Node();
        newNode->data = c;
        newNode->next = top;
        top = newNode;
    }

    // Pop function
    char pop() {
        if (isEmpty()) {
            cout << "Stack underflow!" << endl;
            return '\0';
        }
        Node* temp = top;
        char poppedValue = top->data;
        top = top->next;
        delete temp;
        return poppedValue;
    }

    // Peek function (returns top element)
    char peek() {
        if (isEmpty()) {
            return '\0';
        }
        return top->data;
    }

    // Check if the stack is empty
    bool isEmpty() {
        return top == nullptr;
    }
    
    // Destructor to clean up the memory
    ~Stack() {
        while (top) {
            pop();
        }
    }
};

// Function to determine precedence of operators
int precedence(char op) {
    if (op == '+' || op == '-') {
        return 1;
    } else if (op == '*' || op == '/') {
        return 2;
    }
    return 0;
}

// Function to perform infix to postfix conversion
string infixToPostfix(const string& infix) {
    Stack s;
    string postfix;
    
    for (char c : infix) {
        // If the character is an operand, add it to the result
        if (isalnum(c)) {
            postfix += c;
        }
        // If the character is '(', push it to the stack
        else if (c == '(') {
            s.push(c);
        }
        // If the character is ')', pop from stack until '('
        else if (c == ')') {
            while (!s.isEmpty() && s.peek() != '(') {
                postfix += s.pop();
            }
            s.pop();  // Pop '(' from stack
        }
        // If the character is an operator
        else if (c == '+' || c == '-' || c == '*' || c == '/') {
            while (!s.isEmpty() && precedence(s.peek()) >= precedence(c)) {
                postfix += s.pop();
            }
            s.push(c);
        }
    }

    // Pop all remaining operators in the stack
    while (!s.isEmpty()) {
        postfix += s.pop();
    }

    return postfix;
}

int main() {
    string infix;

    // Input the infix expression
    cout << "Enter an infix expression: ";
    cin >> infix;

    // Convert infix to postfix
    string postfix = infixToPostfix(infix);

    // Output the postfix expression
    cout << "Postfix expression: " << postfix << endl;

    return 0;
}
