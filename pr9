Represent a graph of your college campus using adjacency list /adjacency matrix. Nodes should
represent the various departments/institutes and links should represent the distance between them. Find
minimum spanning tree using a) Using Primâ€™s algorithm.

#include <iostream>
#include <vector>
#include <climits>
#include <cstring>
using namespace std;

// Number of departments (vertices in the graph)
#define V 5  // Example: 5 departments (CS, EE, ME, CE, IT)

// Function to find the department with the minimum key value that is not yet included in MST
int minKey(int key[], bool mstSet[]) {
    int min = INT_MAX, minIndex;
    for (int v = 0; v < V; v++) {
        if (!mstSet[v] && key[v] < min) {
            min = key[v];
            minIndex = v;
        }
    }
    return minIndex;
}

// Function to implement Prim's algorithm to find the Minimum Spanning Tree (MST)
void primMST(int graph[V][V]) {
    int parent[V];  // Array to store constructed MST
    int key[V];     // Key values used to pick the minimum weight edge
    bool mstSet[V]; // To represent the set of vertices included in MST

    // Initialize all keys as INFINITE and mstSet[] as false
    for (int i = 0; i < V; i++) {
        key[i] = INT_MAX;
        mstSet[i] = false;
    }

    // Start with the first department (0th index)
    key[0] = 0;     // Make the first node as the source
    parent[0] = -1;  // First node is the root of the MST

    // The MST will have V vertices
    for (int count = 0; count < V - 1; count++) {
        // Pick the minimum key vertex from the set of vertices not yet included in MST
        int u = minKey(key, mstSet);

        // Mark the picked vertex as true (included in MST)
        mstSet[u] = true;

        // Update the key value and parent index of the adjacent vertices of the picked vertex
        for (int v = 0; v < V; v++) {
            // graph[u][v] is non-zero only for adjacent vertices of u
            // mstSet[v] is false for vertices not yet included in MST
            // Update the key only if graph[u][v] is smaller than key[v]
            if (graph[u][v] && !mstSet[v] && graph[u][v] < key[v]) {
                key[v] = graph[u][v];
                parent[v] = u;
            }
        }
    }

    // Print the constructed MST
    cout << "Edge \tWeight\n";
    for (int i = 1; i < V; i++) {
        cout << (parent[i] + 1) << " - " << (i + 1) << "\t" << graph[i][parent[i]] << endl;
    }
}

int main() {
    // Example graph with 5 departments (CS, EE, ME, CE, IT)
    int graph[V][V] = {
        {0, 2, 0, 6, 0},
        {2, 0, 3, 8, 5},
        {0, 3, 0, 0, 7},
        {6, 8, 0, 0, 9},
        {0, 5, 7, 9, 0}
    };

    // Run Prim's algorithm to find MST
    primMST(graph);

    return 0;
}
