Represent a graph of city using adjacency matrix /adjacency list. Nodes should represent the various
landmarks and links should represent the distance between them. Find the shortest path using Dijkstra's
algorithm from single source to all destination.

#include <iostream>
#include <climits>
#include <vector>
#include <cstring>

using namespace std;

// Number of landmarks (vertices in the graph)
#define V 6  // Example: 6 landmarks

// Function to find the landmark with the minimum distance value
int minDistance(int dist[], bool sptSet[]) {
    int min = INT_MAX, minIndex;
    for (int v = 0; v < V; v++) {
        if (!sptSet[v] && dist[v] < min) {
            min = dist[v];
            minIndex = v;
        }
    }
    return minIndex;
}

// Function to implement Dijkstra's algorithm
void dijkstra(int graph[V][V], int src) {
    int dist[V];  // Array to store the shortest distance from source to each landmark
    bool sptSet[V];  // sptSet[i] will be true if vertex i is included in the shortest path tree

    // Initialize all distances as INFINITE and sptSet[] as false
    for (int i = 0; i < V; i++) {
        dist[i] = INT_MAX;
        sptSet[i] = false;
    }

    // Distance from the source to itself is 0
    dist[src] = 0;

    // Find the shortest path for all vertices
    for (int count = 0; count < V - 1; count++) {
        // Pick the vertex with the minimum distance value from the set of vertices
        // not yet processed
        int u = minDistance(dist, sptSet);

        // Mark the picked vertex as processed
        sptSet[u] = true;

        // Update dist[] value of the adjacent vertices of the picked vertex
        for (int v = 0; v < V; v++) {
            // Update dist[v] if and only if the current vertex is not in sptSet,
            // there is an edge from u to v, and the total distance from source to v
            // through u is smaller than the current distance
            if (!sptSet[v] && graph[u][v] && dist[u] != INT_MAX && dist[u] + graph[u][v] < dist[v]) {
                dist[v] = dist[u] + graph[u][v];
            }
        }
    }

    // Print the constructed distance array
    cout << "Landmark\tDistance from Source" << endl;
    for (int i = 0; i < V; i++) {
        cout << i + 1 << "\t\t" << dist[i] << endl;  // Landmark indices are 1-based in the output
    }
}

int main() {
    // Example city graph with 6 landmarks (1, 2, 3, 4, 5, 6)
    int graph[V][V] = {
        {0, 7, 9, 0, 0, 14}, // Landmark 1 (1-based indexing)
        {7, 0, 10, 15, 0, 0}, // Landmark 2
        {9, 10, 0, 11, 0, 2}, // Landmark 3
        {0, 15, 11, 0, 6, 0}, // Landmark 4
        {0, 0, 0, 6, 0, 9},   // Landmark 5
        {14, 0, 2, 0, 9, 0}   // Landmark 6
    };

    int source = 0;  // Let's assume the source is Landmark 1 (index 0)
    dijkstra(graph, source);

    return 0;
}
